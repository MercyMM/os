expression @ assignment-expression $ expression   ,    assignment-expression  #
assignment-expression @ conditional-expression $ unary-expression  assignment-operator  assignment-expression  #
assignment-operator @ = $ /= $ |= $  ^=  $ %= $ *= $ <<=  $ += $ >>=  $ &= $ -=  #
constant-expression @ conditional-expression  #
conditional-expression @ logical-OR-expression $ logical-OR-expression  ?   expression  :  conditional-expression  #
logical-OR-expression @ logical-AND-expression $ logical-OR-expression   ||   logical-AND-expression  #
logical-AND-expression @ inclusive-OR-expression $ logical-AND-expression   &&  inclusive-OR-expression  #
inclusive-OR-expression @ exclusive-OR-expression $ inclusive-OR-expression  |  exclusive-OR-expression  #
exclusive-OR-expression @ AND-expression  $ exclusive-OR-expression  ^ AND-expression  #
AND-expression @ equality-expression $ AND-expression  &  equality-expression  #
equality-expression @ relational-expression $ equality-expression  ==  relational-expression $ equality-expression  !=  relational-expression  #
relational-expression @ shift-expression $ relational-expression  <  shift-expression $ relational-expression  >  shift-expression $ relational-expression  <=  shift-expression $ relational-expression  >=  shift-expression  #
shift-expression @ additive-expression $  shift-expression  <<  additive-expression $  shift-expression  >>  additive-expression  #
additive-expression @ multiplicative-expression $ additive-expression  +  multiplicative-expression $ additive-expression  -  multiplicative-expression  #
multiplicative-expression @ cast-expression $ multiplicative-expression  *  cast-expression $ multiplicative-expression  /  cast-expression $ multiplicative-expression  %  cast-expression  #
cast-expression @ unary-expression $   (  type-name  )  cast-expression   #
unary-expression @ postfix-expression $  ++ unary-expression $  --  unary-expression $  unary-operator  cast-expression $ sizeof unary-expression $ sizeof  (  type-name  )  #
unary-operator @ ~ $  * $ & $ + $ - $ !  #
postfix-expression @ primary-expression $ postfix-expression  [  expression  ] $  postfix-expression  (  ) $ postfix-expression  (  argument-expression-list  ) $ postfix-expression  .  ID  $ postfix-expression  ->  ID $ postfix-expression  ++ $ postfix-expression   --   #
argument-expression-list @ assignment-expression $ argument-expression-list  ,  assignment-expression  #
primary-expression @ ID  $ CONST $ STR $ (  expression  )   #
declaration-list @ declaration  $ declaration-list  declaration  #
declaration @ declaration-specifiers  ; $ declaration-specifiers  init-declarator-list  ;  #
declaration-specifiers @ storage-class-specifier $ storage-class-specifier  declaration-specifiers $ type-specifier $  type-specifier  declaration-specifiers  #
storage-class-specifier @ typedef  $ extern  $ static  #
type-specifier @ void $ char $ short $ int $ long $ float $ double $ signed  $ unsigned  $ struct-specifier  $ union-specifier  $ enum-specifier   $ typedef-name  #
struct-specifier @ struct  ID  {  struct-declaration-list  } $ struct  {  struct-declaration-list  } $ struct ID  #
union-specifier @ union ID  {  struct-declaration-list  } $  union  {  struct-declaration-list  } $ union ID  #
struct-declaration-list @ struct-declaration $ struct-declaration-list  struct-declaration  #
struct-declaration @ specifier-qualifier-list  struct-declarator-list  ;  #
specifier-qualifier-list @ type-specifier  $ type-specifier  specifier-qualifier-list  #
struct-declarator-list @ declarator $ struct-declarator-list  ,  declarator  #
enum-specifier @ enum ID  {  enumerator-list  } $ enum  {  enumerator-list  } $ enum ID  #
enumerator-list @ enumerator $ enumerator-list  ,  enumerator  #
enumerator @ enumeration-constant $ enumeration-constant  =  constant-expression  #
enumeration-constant @ ID  #
typedef-name @ ID  #
init-declarator-list @ init-declarator $ init-declarator-list  ,  init-declarator  #
init-declarator @ declarator $ declarator  =  initializer  #
declarator @ direct-declarator $ pointer  direct-declarator  #
pointer @ * $ *  pointer  #
direct-declarator @ ID $ direct-declarator  [  assignment-expression  ] $ direct-declarator  (  parameter-type-list  ) $ (  declarator  ) $ direct-declarator  (   ) $ direct-declarator  [   ]  #
parameter-type-list @ parameter-list $ parameter-list  ,  ...  #
parameter-list @ parameter-declaration $ parameter-list  ,  parameter-declaration  #
parameter-declaration @ declaration-specifiers  declarator $ declaration-specifiers $ declaration-specifiers  abstract-declarator  #
type-name @ specifier-qualifier-list $ specifier-qualifier-list abstract-declarator  #
abstract-declarator @ pointer $ direct-abstract-declarator $ pointer direct-abstract-declarator  #
direct-abstract-declarator @  (  abstract-declarator  ) $ direct-abstract-declarator   [  assignment-expression  ] $ direct-abstract-declarator   [   ]  $  [  assignment-expression  ] $ [   ] $ direct-abstract-declarator   [  *  ] $  [ * ] $ direct-abstract-declarator  (  parameter-type-list  ) $ direct-abstract-declarator   (   ) $ (   parameter-type-list   ) $ (   )  #
initializer @ assignment-expression $ {  initializer-list  } $ {  initializer-list  ,  }  #
initializer-list @ initializer $ designation initializer $ initializer-list  ,  designation initializer $ initializer-list  ,  initializer  #
designation @ designator-list  =  #
designator-list @ designator $ designator-list  designator  #
designator @  [  constant-expression ]  $  .  ID  #
statement @ labeled-statement $ compound-statement $ expression-statement $ selection-statement $ iteration-statement $ jump-statement  #
labeled-statement @ ID  :  statement  #
compound-statement @ {  } $ {  block-item-list  }  #
block-item-list @ block-item $ block-item-list  block-item  #
block-item @ declaration  $ statement  #
expression-statement @ ; $ expression  ;  #
selection-statement @ if  (  expression  )  statement $ if  (  expression  )  statement  else  statement $ switch  (  expression  )  {  case-block  }  #
case-block @ case-labeled-statement-list $ case-labeled-statement-list default  :  statement  #
case-labeled-statement-list @ case-labeled-statement $ case-labeled-statement-list   case-labeled-statement  #
case-labeled-statement @ case constant-expression : statement  #
iteration-statement @ while  (  expression  )  statement $ do  statement  while  (  expression  )  ; $ for (  expression   ;   expression  ;   expression  )   statement $ for (  ;   expression   ;   expression  )  statement $ for (  expression   ;   ;  expression  )  statement $ for  (  expression   ;   expression   ;   )  statement $ for ( expression  ;   ;  )  statement $ for (   ;   expression   ;    )  statement $ for (   ;   ;   expression  )  statement $  for  (   ;    ;    )   statement  #
jump-statement @ goto ID  ; $ continue  ; $ break  ; $ return expression   ; $ return  ;  #
translation-unit @ declaration-list $ function-definition-list $ declaration-list   function-definition-list  #
function-definition-list @ function-definition $ function-definition-list  function-definition  #
function-definition @ declaration-specifiers  declarator  compound-statement  #
#
#
